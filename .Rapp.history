j = x > 7
x[i|j}]
x[i|j]
q()
temp = c(6, 15, 26, 15, 18, 23, 19, 32, 28, 44)
temp
median(temp)
mode(temp)
q()
temp = c(6, 15, 26, 15, 18, 23, 19, 32, 28, 44)
temp
sort(temp)
lenth(temp)
len(temp)
length(temp)
median(temp)
18+23
41/2
32-26
average = mean(temp)
average
squared = temp ^ 2
squared
squared = (temp - average)^2
squared
6-22.6
16.6^2
sum(squared)
squared = temp ^2
temp2 = squared - mean
squared
temp2 = squared - average
temp2
sum(temp2)
temp2 = temp - average
temp2
abs(temp2)
sum(abs(temp2))
q()
?get.hist.quote
??get.hist.quote
?na.loc
?na.locf
??na.locf
?coredata
??coredata
?svm
??svm
q()
library(KernSmooth)
quit()
x <- 1:10
x
if (x>5) { x<- 0}
x = 0
x
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z = 10
f(3)
x <- 1:10
if (x>50) { x = 0}
x
ls
ls()
rm(list=ls())
setq()
q()
x <- c(rnorm(10),runif(10),rnorm(10,1))
x
q()
library(datasets)
data(iris)
ls()
iris
str(iris)
summary(iris$Species)
apply(iris$Species,2,mean)
colMeans
?colMeans
colMeans(iris)
colMeans(iris$Species)
colMeans(iris$Speciesiris)
iris
colMeans(iris$Species=="virginica")
array(rnorm(2*2*10),c(2,2,10))
?colMeans
colMeans(iris,iris$Species=="virginica",iris$Sepal.Length)
colMeans(iris,iris$Species,iris$Sepal.Length)
temp = subset(iris,iris$Species=="virginica")
temp
colMeans(temp)
colMeans(temp[1:3,])
colMeans(temp$Sepal.Length)
mean(temp$Sepal.Length)
colMeans(temp)
colMeans(temp,1,2)
temp[1:3,]
temp[,1:3]
colmeans(temp[,1:3])
colMeans(temp[,1:3])
colMeans(iris[virginica])
iris[virginica]
iris["virginica"]
str(iris$Species)
iris["setosa"]
apply(iris,1,mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],2,mean)
data(mtcars)
str(mtcars)
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cycl),mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars,mtcars$cyl),mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
?tapply
split(mtcars,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21-82.64
debug(ls)
ls
ls()
q
quit()
q
s
ls
ls()
q()
?debug
undebug(ls)
ls()
>?with
?with
with(mtcars,tapply(mpg,cyl,mean))
?solve
x = matrix(rnum(2,2))
x = matrix(2,2)
x
solve(x)
x = matrix(2*2,2)
x
x = matrix(2,2,2)
x
solve(x)
x = matrix(1:4,2,2)
x
solve(x)
solve(solve(x))
ls()
x <<- 2
x
type(x)
typeof(x)
list(x)
x
y <- 2
y
typeof(y)
where(y)
makeVector <- function(x = numeric()) {#
        m <- NULL#
        set <- function(y) {#
                x <<- y#
                m <<- NULL#
        }#
        get <- function() x#
        setmean <- function(mean) m <<- mean#
        getmean <- function() m#
        list(set = set, get = get,#
             setmean = setmean,#
             getmean = getmean)#
}
makevector(2)
makeVector(2)
x
rm(x)
makeVector(2)
x
list
ls()
y
rm(y)
makeVector
makeVector$setmean(2)
x = makeVector(2)
x
x$get
x(get())
x$get()
x$getmean()
x$setmean(8)
x$getmean()
makeCacheMatrix <- function(input_matrix = matrix()) {#
        inverse_matrix <- NULL#
        set <- function(x) {#
                input_matrix <<- x#
                inverse_matrix <<- NULL#
        }#
        get <- function() input_matrix#
        setinverse <- function(y) inverse_matrix <<- y#
        getinverse <- function() inverse_matrix#
        list(set = set, get = get,#
             setinverse = setinverse,#
             getinverse = getinverse)#
#
}
ls()
x = makeCacheMatrix(10)
x
x$get()
rnorm(2,2,2)
matrix(rnorm(2,2,2)
)
matrix(rnorm(2),rnorm(2))
matrix(rnorm(2))
?matrix
rnorm(4)
matrix(rnorm(4),2,2)
x = makeCacheMatrix(matrix(rnorm(4),2,2))
x$get()
x$set(matrix(rnorm(4),2,2))
x$get()
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        mem_inverse <- x$getinverse#
        if(!is.null(mem_inverse)) {#
        	message("getting cached data")#
        	return(mem_inverse)#
        }#
        data <- x$get()#
        mem_inverse <- solve(data)#
        x$setinverse(mem_inverse)#
        mem_inverse#
}
x
x$get
x$get()
solve(x$get())
x$get()
cacheSolve(x)
x$getinverse()
x$get()
cacheSolve()
cacheSolve
cacheSolve(x)
is.null(x$getinverse)
x$getinverse
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        mem_inverse <- x$getinverse()#
        if(!is.null(mem_inverse)) {#
        	message("getting cached data")#
        	return(mem_inverse)#
        }#
        data <- x$get()#
        mem_inverse <- solve(data)#
        x$setinverse(mem_inverse)#
        mem_inverse#
}
cacheSolve(x)
x$getinverse()
q()
ls
setwd("~/Documents/david documents/datascience_class/")
setwd("~/Documents/david documents/datascience_class/ProgrammingAssignment2/")
source("cachematrix.R")
ls()
makeCacheMatrix
ls()
x = makeCacheMatrix
x
x$get()
x
x$set(matrix(rnorm(4),2,2))
x
x$getinverse()
x
x = makeCacheMatrix(matrix(rnorm(4),2,2))
x$get()
x$set(matrix(rnorm(4),2,2))
x$get()
x = makeCacheMatrix()
x
x$get()
x$set(matrix(rnorm(4),2,2))
x$get()
x$getinverse
x$getinverse()
cacheSolve(x)
x$getinverse
x$getinverse()
cacheSolve(x)
q()
